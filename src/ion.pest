WHITESPACE = _{ " " | "\n" }
Char = _{ 'a'..'z' | 'A'..'Z' }
Digit = _{ '0'..'9' }
Escaped = { "\\" ~ ANY }

// Variables can contain/start with '_' and/or ASCII characters
Ident = ${ !Keyword ~ (Char | "_")+ ~ (Char | "_" | Digit)* }

// Line starting with '#' counts as comment until the end of the line
Comment = _{ "#"+ ~ ANY* }

// Statements separated by either ';' or '\n'
Sep = { SemiColon | NewLine }
  SemiColon = { ";" }
  NewLine   = { "\n" }

Keyword = _{ End
           | Let
	   | Export
	   | Match | Case
	   | If | ElseIf | Else
	   | And | Or
	   | For | In
	   | While
	   | Break | Continue
	   | Fn }
  End      = { "end" }
  Let      = { "let" }
  Export   = { "export" }
  Match    = { "match" }
  Case     = { "case" }
  If       = { "if" }
  Else     = { "else" }
  ElseIf   = { "else if" }
  And      = { "and" | "&&" }
  Or       = { "or" | "||" }
  For      = { "for" }
  In       = { "in" }
  While    = { "while" }
  Break    = { "break" }
  Continue = { "continue" }
  Fn       = { "fn" }

// Literal parsing
// XXX: Do we need explicit signs or can be hiden with `_{}` matchin?
Sign = _{ SignNeg | SignPlus }
  SignPlus = ${ "+" | "" }
  SignNeg  = ${ "-" }

FloatHead = _{ Digit }
FloatFrac = _{ Digit }
FloatSep = _{ "." }

Literal = _{ LitFloat
           | LitInt
	   | LitBool
	   | LitStr
	   | LitArray
	   | LitMap
	   | Atom }
  LitFloat = ${ Sign ~ ( FloatHead* ~ FloatSep ~ FloatFrac+
                       | FloatHead+ ~ FloatSep ~ FloatFrac*) }
  LitInt = ${ Sign ~ Digit+ }
  LitBool = { False | True }
    False = _{ "false" }
    True  = _{ "true" }
  // XXX: LitChar should not be added to Literals directly, since they
  // are just used in special casing Range
  LitChar = { (Quote ~ Char ~ Quote) | Char }
  LitStr = _{ LitSQuoteStr
	    | LitDQuoteStr
	    | LitEvalStr }
    LitSQuoteStr = { SQuote ~ (Escaped | !SQuote ~ ANY)* ~ SQuote }
    LitDQuoteStr = { DQuote ~ (Escaped | !(DQuote | EvalOp) ~ ANY)* ~ DQuote }
    LitEvalStr   = { DQuote ~ ( Eval
			      | Method
			      | SubShell
			      | Escaped
			      | !DQuote ~ ANY )* ~ DQuote }
  LitArray = _{ LitRangeArray
              | LitFloatArray
	      | LitIntArray
	      | LitAnyArray }
    // XXX: not supported right now?
    LitRangeArray = { "[" ~ Range ~ "]" }
    LitFloatArray = { "[" ~ LitFloat+ ~ "]" }
    LitIntArray   = { "[" ~ LitInt+ ~ "]" }
    LitAnyArray   = { "[" ~ Literal* ~ "]" }
  LitMap = { "[" ~ LitMapPair+ ~ "]" }
    LitMapPair = ${ LitMapKey ~ "=" ~ LitMapValue }
      LitMapKey   = { Expression }
      LitMapValue = { Expression }

// Range syntax
RangeOp = _{ (RangeIn | RangeEx) }
  RangeIn = { ("..." | "..=") }
  RangeEx = { ".." }
RangeVal  = _{ LitInt | LitChar | (Sign? ~ (Method | Eval | SubShell)) }
RangeStep = ${ ".." ~ (LitInt | (Sign? ~ (Method | Eval | SubShell))) }
Range = { RangeVal ~ (RangeStep ~ RangeOp | RangeOp) ~ RangeVal }


// redirect operators
// >
// <
// |
// &>

SubShell = _{ Shell | ArrayShell }
  Shell      = ${"$(" ~ (WHITESPACE | Expression)+ ~ ")"}
  ArrayShell = ${"@(" ~ (WHITESPACE | Expression)+ ~ ")"}

// Variable syntax consist of variable name with optional ':' separated type
// specifier, example would be 'varname:type'.

Variable = _{ Ident ~ (":" ~ Type)? }
  Type = _{ Primitive | AnyArray | TypedArray | Map }
    Primitive = _{ Bool | Int | Float | Str }
      Bool  = { "bool" }
      Int   = { "int" }
      Float = { "float" }
      Str   = { "str" }
    TypedArray = { "[" ~ Type ~ "]" }
    AnyArray = { "[]" }
    Map = _{ BMap | HMap }
      BMap = ${ "bmap" ~ TypedArray }
      HMap = ${ "hmap" ~ TypedArray }

// Multiple variable bindings can be declared on the same line, where
// each 'varname:type' is whitespace separated
Variables = { Variable ~ Variable* }

// Assignment
AssignOp = _{ Assign
            | IncAssign
	    | DecAssign
	    | MulAssign
	    | DivAssign
	    | ConcatAssing }
  Assign       = { "=" }
  IncAssign    = { "+=" }
  DecAssign    = { "-=" }
  MulAssign    = { "*=" }
  DivAssign    = { "/=" }
  ConcatAssing = { "++=" }

EvalOp = _{ ArrEvalOp | StrEvalOp }
  ArrEvalOp = _{ "@" }
  StrEvalOp = _{ "$" }

Quote = _{ SQuote | DQuote }
  SQuote = { "'" }
  DQuote = { "\"" }

Parent = _{ "(" | ")" }
Brace  = _{ "{" | "}" }
Bracket = _{ "[" | "]" }

Atom = ${ ( !Keyword
          ~ !EvalOp
	  ~ !WHITESPACE
	  ~ !Quote
	  ~ !Parent
	  ~ !Brace
	  ~ !Bracket
	  ~ !Sep
	  ~ ANY)+ }

Eval = _{ StrEval | ArrEval }
  StrEval = ${ StrEvalOp ~ Ident }
  ArrEval = ${ ArrEvalOp ~ Ident }

// XXX: Assuming methods have at least one argument
Method = _{ StrMethod | ArrMethod }
  StrMethod = ${ StrEvalOp ~ Ident ~ "(" ~ MethodArgs ~ ")" }
  ArrMethod = ${ ArrEvalOp ~ Ident ~ "(" ~ MethodArgs ~ ")" }
    MethodArgs = _{ Expression ~ (WHITESPACE ~ Expression)* }

Expression = _{ Literal
	      | Atom
	      | Method
              | Eval
	      | SubShell }

StatementLet = { Let ~ Variables ~ AssignOp ~ Expression+ }

Statements = _{ StatementLet }
Expressions = _{ Expression* }

Input = { Comment | Statements | Expressions }

Main = { SOI ~ Input ~ Sep? ~ EOI }
